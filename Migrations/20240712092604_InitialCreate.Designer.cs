// <auto-generated />
using System;
using EverythingSucks.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EverythingSucks.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240712092604_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EverythingSucks.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CartStatusId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.CartStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CartStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("04b88432-5b62-4340-a7dc-83e6050477e9"),
                            Name = "HasProducts"
                        },
                        new
                        {
                            Id = new Guid("3eee1fda-9fbb-4740-98b6-802cff397fe4"),
                            Name = "Empty"
                        });
                });

            modelBuilder.Entity("EverythingSucks.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c4a75fe-6844-4745-b2bd-8512d715e919"),
                            Name = "Tops"
                        },
                        new
                        {
                            Id = new Guid("8af5bee2-a25f-490c-9420-e2fbe524602a"),
                            Name = "Bottoms"
                        },
                        new
                        {
                            Id = new Guid("2bc11a7d-a95d-42d0-b066-766b48c14705"),
                            Name = "Outerwear"
                        },
                        new
                        {
                            Id = new Guid("0f02d6ed-5066-4dd9-abf3-10621d55536c"),
                            Name = "Accessories"
                        });
                });

            modelBuilder.Entity("EverythingSucks.Models.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Color", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FavoriteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("efcc828a-acd6-48e2-b405-6fd304d0bfdb"),
                            Name = "Pending"
                        },
                        new
                        {
                            Id = new Guid("1138b937-9b5f-46c7-9a91-a23bd5d544f7"),
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = new Guid("7969b480-3e4f-4a34-b5ba-1c4b369b487c"),
                            Name = "Shipped"
                        },
                        new
                        {
                            Id = new Guid("6a76e153-09ac-4e6a-86a7-38070a21b072"),
                            Name = "Delivered"
                        },
                        new
                        {
                            Id = new Guid("585b52c7-52be-439f-9110-3402ffb6a3fe"),
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("EverythingSucks.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProdductColor", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductColorId");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7708d97a-7fe6-47df-8352-ac655513e030"),
                            CategoryId = new Guid("2c4a75fe-6844-4745-b2bd-8512d715e919"),
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = new Guid("03cd07f0-1fbc-428c-8620-36f6d28dc914"),
                            CategoryId = new Guid("2c4a75fe-6844-4745-b2bd-8512d715e919"),
                            Name = "Polo Shirts"
                        },
                        new
                        {
                            Id = new Guid("e1adb500-5457-4d7e-b2e6-0d89cc3ecadb"),
                            CategoryId = new Guid("2c4a75fe-6844-4745-b2bd-8512d715e919"),
                            Name = "Sweatshirts & Hoodies"
                        },
                        new
                        {
                            Id = new Guid("e64792f9-6171-42a1-ab74-ff74be495161"),
                            CategoryId = new Guid("2c4a75fe-6844-4745-b2bd-8512d715e919"),
                            Name = "Sweaters & Cardigans"
                        },
                        new
                        {
                            Id = new Guid("04a16581-2f97-4429-bf2e-8c946bed1e99"),
                            CategoryId = new Guid("2c4a75fe-6844-4745-b2bd-8512d715e919"),
                            Name = "Formal Shirts"
                        },
                        new
                        {
                            Id = new Guid("bc40712f-aa68-4a67-8ffb-259fd0fd40c4"),
                            CategoryId = new Guid("2c4a75fe-6844-4745-b2bd-8512d715e919"),
                            Name = "Casual Shirts"
                        },
                        new
                        {
                            Id = new Guid("ed30a734-d39e-4a33-90f9-9c7f84af4b0d"),
                            CategoryId = new Guid("8af5bee2-a25f-490c-9420-e2fbe524602a"),
                            Name = "Shorts"
                        },
                        new
                        {
                            Id = new Guid("7586c08d-c06b-4cdb-b5ca-2e112d3bb0e9"),
                            CategoryId = new Guid("8af5bee2-a25f-490c-9420-e2fbe524602a"),
                            Name = "Jeans & Colored Jeans"
                        },
                        new
                        {
                            Id = new Guid("f71a9e54-723a-4021-8344-212f80019410"),
                            CategoryId = new Guid("8af5bee2-a25f-490c-9420-e2fbe524602a"),
                            Name = "Wide Leg Pants"
                        },
                        new
                        {
                            Id = new Guid("dae91f93-18a9-4cd6-a7a3-e14e9deed973"),
                            CategoryId = new Guid("8af5bee2-a25f-490c-9420-e2fbe524602a"),
                            Name = "Trousers"
                        },
                        new
                        {
                            Id = new Guid("a8ce7171-b4b9-4baa-bed6-4f8e531bb8ea"),
                            CategoryId = new Guid("8af5bee2-a25f-490c-9420-e2fbe524602a"),
                            Name = "Easy Pants"
                        },
                        new
                        {
                            Id = new Guid("74e1e355-b86e-4a48-a4c4-e172dcde263d"),
                            CategoryId = new Guid("8af5bee2-a25f-490c-9420-e2fbe524602a"),
                            Name = "Sweatpants"
                        },
                        new
                        {
                            Id = new Guid("3291571e-f7de-4e26-9dc8-800f56130b0b"),
                            CategoryId = new Guid("2bc11a7d-a95d-42d0-b066-766b48c14705"),
                            Name = "Jackets"
                        },
                        new
                        {
                            Id = new Guid("421ae511-3086-46ff-8a0a-acbb81120782"),
                            CategoryId = new Guid("2bc11a7d-a95d-42d0-b066-766b48c14705"),
                            Name = "Blazers"
                        },
                        new
                        {
                            Id = new Guid("9b19a7bc-a5e0-4506-9a85-07bc9d812ecd"),
                            CategoryId = new Guid("2bc11a7d-a95d-42d0-b066-766b48c14705"),
                            Name = "Blousons"
                        },
                        new
                        {
                            Id = new Guid("609a57a7-1354-49a7-ac5c-0b2d679b89ab"),
                            CategoryId = new Guid("2bc11a7d-a95d-42d0-b066-766b48c14705"),
                            Name = "Coat"
                        },
                        new
                        {
                            Id = new Guid("5583a17f-7961-44ad-bec5-218eeb467ff7"),
                            CategoryId = new Guid("0f02d6ed-5066-4dd9-abf3-10621d55536c"),
                            Name = "Hats & Caps"
                        },
                        new
                        {
                            Id = new Guid("ddb19cec-46ba-4bba-8165-56346fedc3f9"),
                            CategoryId = new Guid("0f02d6ed-5066-4dd9-abf3-10621d55536c"),
                            Name = "Sunglasses"
                        },
                        new
                        {
                            Id = new Guid("ab2bf9f5-d658-485f-ab90-4b4436006802"),
                            CategoryId = new Guid("0f02d6ed-5066-4dd9-abf3-10621d55536c"),
                            Name = "Bags"
                        },
                        new
                        {
                            Id = new Guid("ef0eb10d-7357-478c-a988-3ef06d222946"),
                            CategoryId = new Guid("0f02d6ed-5066-4dd9-abf3-10621d55536c"),
                            Name = "Belts"
                        });
                });

            modelBuilder.Entity("EverythingSucks.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f02d940-9f5f-46e1-a964-ef9fe4764303"),
                            Name = "M"
                        },
                        new
                        {
                            Id = new Guid("24720b00-84d7-4e41-b3b9-a87042164a08"),
                            Name = "L"
                        },
                        new
                        {
                            Id = new Guid("2d4fc3d0-49ed-42b9-8d6e-a9f7d7052871"),
                            Name = "XL"
                        },
                        new
                        {
                            Id = new Guid("a3abb5d3-5f2e-4782-b688-90c34497a0c4"),
                            Name = "2XL"
                        },
                        new
                        {
                            Id = new Guid("89a97021-4030-4241-91d1-d290fefa2d4b"),
                            Name = "3XL"
                        });
                });

            modelBuilder.Entity("EverythingSucks.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique()
                        .HasFilter("[CartId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4407938a-b3a9-448f-8194-96552514f38f",
                            ConcurrencyStamp = "dd52635b-81b7-49f2-afec-6aa430f6ff86",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5d071cf0-f65c-4f76-9886-6b9cbd68a5d1",
                            ConcurrencyStamp = "ffe64798-4f4f-4939-8d88-98ca5f94adf2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.Cart", b =>
                {
                    b.HasOne("EverythingSucks.Models.CartStatus", "CartStatus")
                        .WithMany("Carts")
                        .HasForeignKey("CartStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CartStatus");
                });

            modelBuilder.Entity("EverythingSucks.Models.CartItem", b =>
                {
                    b.HasOne("EverythingSucks.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EverythingSucks.Models.ProductColor", "ProductColor")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductColorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EverythingSucks.Models.Product", null)
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("EverythingSucks.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.Navigation("Cart");

                    b.Navigation("ProductColor");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("EverythingSucks.Models.Favorite", b =>
                {
                    b.HasOne("EverythingSucks.Models.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EverythingSucks.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EverythingSucks.Models.Order", b =>
                {
                    b.HasOne("EverythingSucks.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EverythingSucks.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("OrderStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EverythingSucks.Models.OrderItem", b =>
                {
                    b.HasOne("EverythingSucks.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EverythingSucks.Models.ProductColor", "ProductColor")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductColorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EverythingSucks.Models.Product", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("EverythingSucks.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.Navigation("Order");

                    b.Navigation("ProductColor");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("EverythingSucks.Models.Product", b =>
                {
                    b.HasOne("EverythingSucks.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EverythingSucks.Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductColor", b =>
                {
                    b.HasOne("EverythingSucks.Models.Color", "Color")
                        .WithMany("ProductColors")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EverythingSucks.Models.Product", "Product")
                        .WithMany("ProductColors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductImage", b =>
                {
                    b.HasOne("EverythingSucks.Models.ProductColor", "ProductColor")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductColorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProductColor");
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductType", b =>
                {
                    b.HasOne("EverythingSucks.Models.Category", "Category")
                        .WithMany("ProductTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EverythingSucks.Models.User", b =>
                {
                    b.HasOne("EverythingSucks.Models.Cart", "Cart")
                        .WithOne("User")
                        .HasForeignKey("EverythingSucks.Models.User", "CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EverythingSucks.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EverythingSucks.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EverythingSucks.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EverythingSucks.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EverythingSucks.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EverythingSucks.Models.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EverythingSucks.Models.CartStatus", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("EverythingSucks.Models.Category", b =>
                {
                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("EverythingSucks.Models.Color", b =>
                {
                    b.Navigation("ProductColors");
                });

            modelBuilder.Entity("EverythingSucks.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("EverythingSucks.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EverythingSucks.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductColors");
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductColor", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EverythingSucks.Models.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
