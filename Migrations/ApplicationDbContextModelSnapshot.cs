// <auto-generated />
using System;
using EverythingSucks.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EverythingSucks.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EverythingSucks.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CartStatusId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.CartStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CartStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0e1edaf-d03e-423e-a424-11d4751d8f7e"),
                            Name = "HasProducts"
                        },
                        new
                        {
                            Id = new Guid("aa677e4a-8f35-43cc-b882-8578728e9d4e"),
                            Name = "Empty"
                        });
                });

            modelBuilder.Entity("EverythingSucks.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f890c2b0-7645-4c47-95f4-5056d55e4eac"),
                            Name = "Tops"
                        },
                        new
                        {
                            Id = new Guid("3d4cdf32-c9bc-473f-9663-6b7399b9d23c"),
                            Name = "Bottoms"
                        },
                        new
                        {
                            Id = new Guid("6952b989-1453-42b0-b4a8-60df3190dd0b"),
                            Name = "Outerwear"
                        },
                        new
                        {
                            Id = new Guid("d8ffdd21-0a5e-4dda-8695-87f56a0eadf1"),
                            Name = "Accessories"
                        });
                });

            modelBuilder.Entity("EverythingSucks.Models.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Color", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FavoriteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd8baeb5-6fad-4abf-88b0-9155d2d8a74a"),
                            Name = "Pending"
                        },
                        new
                        {
                            Id = new Guid("5eb197e4-bc06-495e-b788-f45ed8091581"),
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = new Guid("6bcb6ce2-ef14-4445-8b46-6bee37bac5c2"),
                            Name = "Shipped"
                        },
                        new
                        {
                            Id = new Guid("b1557970-064c-4cd6-8da2-f5f98660e7ab"),
                            Name = "Delivered"
                        },
                        new
                        {
                            Id = new Guid("1f589a3b-8cbe-4860-ac84-93045b47db93"),
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("EverythingSucks.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProdductColor", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductColorId");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("23d18a8b-ff90-45c1-a02a-546be31afd1c"),
                            CategoryId = new Guid("f890c2b0-7645-4c47-95f4-5056d55e4eac"),
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = new Guid("aab95dea-d169-441b-b5f6-3f4bf5f3e538"),
                            CategoryId = new Guid("f890c2b0-7645-4c47-95f4-5056d55e4eac"),
                            Name = "Polo Shirts"
                        },
                        new
                        {
                            Id = new Guid("75d09bda-05d7-497e-9d29-f5a7f023f1d6"),
                            CategoryId = new Guid("f890c2b0-7645-4c47-95f4-5056d55e4eac"),
                            Name = "Sweatshirts & Hoodies"
                        },
                        new
                        {
                            Id = new Guid("e325b03f-b40e-48e5-82f4-d656f2cd40b1"),
                            CategoryId = new Guid("f890c2b0-7645-4c47-95f4-5056d55e4eac"),
                            Name = "Sweaters & Cardigans"
                        },
                        new
                        {
                            Id = new Guid("25cea0a0-ff1d-4ac5-b8c4-628c99434b39"),
                            CategoryId = new Guid("f890c2b0-7645-4c47-95f4-5056d55e4eac"),
                            Name = "Formal Shirts"
                        },
                        new
                        {
                            Id = new Guid("02ea6f73-3e8a-48a3-8dd8-8162efe83fe4"),
                            CategoryId = new Guid("f890c2b0-7645-4c47-95f4-5056d55e4eac"),
                            Name = "Casual Shirts"
                        },
                        new
                        {
                            Id = new Guid("9a508817-b75c-442e-9523-fa07e3aa1c49"),
                            CategoryId = new Guid("3d4cdf32-c9bc-473f-9663-6b7399b9d23c"),
                            Name = "Shorts"
                        },
                        new
                        {
                            Id = new Guid("6690be40-754d-4bc4-bed9-bfa5ab92e23b"),
                            CategoryId = new Guid("3d4cdf32-c9bc-473f-9663-6b7399b9d23c"),
                            Name = "Jeans & Colored Jeans"
                        },
                        new
                        {
                            Id = new Guid("1b1f5a0f-6e75-4cfe-be33-14019e5fec3e"),
                            CategoryId = new Guid("3d4cdf32-c9bc-473f-9663-6b7399b9d23c"),
                            Name = "Wide Leg Pants"
                        },
                        new
                        {
                            Id = new Guid("7717329a-4d98-43ed-a726-fbda75e35a1c"),
                            CategoryId = new Guid("3d4cdf32-c9bc-473f-9663-6b7399b9d23c"),
                            Name = "Trousers"
                        },
                        new
                        {
                            Id = new Guid("1502b62d-36ca-413d-828a-d4f13a7c6066"),
                            CategoryId = new Guid("3d4cdf32-c9bc-473f-9663-6b7399b9d23c"),
                            Name = "Easy Pants"
                        },
                        new
                        {
                            Id = new Guid("5ebd489b-fda0-442d-936c-0047d0326a04"),
                            CategoryId = new Guid("3d4cdf32-c9bc-473f-9663-6b7399b9d23c"),
                            Name = "Sweatpants"
                        },
                        new
                        {
                            Id = new Guid("452fb307-3b71-4c9a-b82a-a04c33be8eba"),
                            CategoryId = new Guid("6952b989-1453-42b0-b4a8-60df3190dd0b"),
                            Name = "Jackets"
                        },
                        new
                        {
                            Id = new Guid("88d99ed0-bedc-42c6-8bcb-b11d804fac94"),
                            CategoryId = new Guid("6952b989-1453-42b0-b4a8-60df3190dd0b"),
                            Name = "Blazers"
                        },
                        new
                        {
                            Id = new Guid("eff4133b-de2e-455e-949c-133028d6739a"),
                            CategoryId = new Guid("6952b989-1453-42b0-b4a8-60df3190dd0b"),
                            Name = "Blousons"
                        },
                        new
                        {
                            Id = new Guid("f5e12d2e-f3d3-4c5e-8be8-f60836ac616b"),
                            CategoryId = new Guid("6952b989-1453-42b0-b4a8-60df3190dd0b"),
                            Name = "Coat"
                        },
                        new
                        {
                            Id = new Guid("10332e77-ff38-4983-a7c4-f7146fdc46f9"),
                            CategoryId = new Guid("d8ffdd21-0a5e-4dda-8695-87f56a0eadf1"),
                            Name = "Hats & Caps"
                        },
                        new
                        {
                            Id = new Guid("52204fcc-c450-497b-9571-8403ccb29299"),
                            CategoryId = new Guid("d8ffdd21-0a5e-4dda-8695-87f56a0eadf1"),
                            Name = "Sunglasses"
                        },
                        new
                        {
                            Id = new Guid("b46b5a40-09ab-44dd-8b57-53bdf86ca632"),
                            CategoryId = new Guid("d8ffdd21-0a5e-4dda-8695-87f56a0eadf1"),
                            Name = "Bags"
                        },
                        new
                        {
                            Id = new Guid("a14c6fa1-c8a2-4dc6-99f3-0eac62423cdf"),
                            CategoryId = new Guid("d8ffdd21-0a5e-4dda-8695-87f56a0eadf1"),
                            Name = "Belts"
                        });
                });

            modelBuilder.Entity("EverythingSucks.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7335ea0e-cc08-4c2f-ae1d-ca9107cfd590"),
                            Name = "M"
                        },
                        new
                        {
                            Id = new Guid("72ee7bd7-c33a-4f6f-914b-2018ad62eff1"),
                            Name = "L"
                        },
                        new
                        {
                            Id = new Guid("639384a7-4474-45be-aa2b-09792a267a93"),
                            Name = "XL"
                        },
                        new
                        {
                            Id = new Guid("0c802622-dc87-4234-9ff4-79a94ba35272"),
                            Name = "2XL"
                        },
                        new
                        {
                            Id = new Guid("a475d2a7-3501-43b3-b1cf-fd995700f3a2"),
                            Name = "3XL"
                        });
                });

            modelBuilder.Entity("EverythingSucks.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique()
                        .HasFilter("[CartId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5eadbc98-09bc-49df-b349-b61ef2e5ca58",
                            ConcurrencyStamp = "0afa3a92-b91f-4863-aacf-f37067893a27",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5479dd0a-aaa6-4baf-92c8-95653e6d61c2",
                            ConcurrencyStamp = "bf7668c8-ed14-42d7-b05e-71912ff3132e",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.Cart", b =>
                {
                    b.HasOne("EverythingSucks.Models.CartStatus", "CartStatus")
                        .WithMany("Carts")
                        .HasForeignKey("CartStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CartStatus");
                });

            modelBuilder.Entity("EverythingSucks.Models.CartItem", b =>
                {
                    b.HasOne("EverythingSucks.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EverythingSucks.Models.ProductColor", "ProductColor")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductColorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EverythingSucks.Models.Product", null)
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("EverythingSucks.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.Navigation("Cart");

                    b.Navigation("ProductColor");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("EverythingSucks.Models.Favorite", b =>
                {
                    b.HasOne("EverythingSucks.Models.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EverythingSucks.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EverythingSucks.Models.Order", b =>
                {
                    b.HasOne("EverythingSucks.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EverythingSucks.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("OrderStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EverythingSucks.Models.OrderItem", b =>
                {
                    b.HasOne("EverythingSucks.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EverythingSucks.Models.ProductColor", "ProductColor")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductColorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EverythingSucks.Models.Product", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("EverythingSucks.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.Navigation("Order");

                    b.Navigation("ProductColor");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("EverythingSucks.Models.Product", b =>
                {
                    b.HasOne("EverythingSucks.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EverythingSucks.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("EverythingSucks.Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductColor", b =>
                {
                    b.HasOne("EverythingSucks.Models.Color", "Color")
                        .WithMany("ProductColors")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EverythingSucks.Models.Product", "Product")
                        .WithMany("ProductColors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductImage", b =>
                {
                    b.HasOne("EverythingSucks.Models.ProductColor", "ProductColor")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductColorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProductColor");
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductType", b =>
                {
                    b.HasOne("EverythingSucks.Models.Category", "Category")
                        .WithMany("ProductTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EverythingSucks.Models.User", b =>
                {
                    b.HasOne("EverythingSucks.Models.Cart", "Cart")
                        .WithOne("User")
                        .HasForeignKey("EverythingSucks.Models.User", "CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EverythingSucks.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EverythingSucks.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EverythingSucks.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EverythingSucks.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EverythingSucks.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EverythingSucks.Models.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EverythingSucks.Models.CartStatus", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("EverythingSucks.Models.Category", b =>
                {
                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("EverythingSucks.Models.Color", b =>
                {
                    b.Navigation("ProductColors");
                });

            modelBuilder.Entity("EverythingSucks.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("EverythingSucks.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EverythingSucks.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductColors");
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductColor", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EverythingSucks.Models.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
