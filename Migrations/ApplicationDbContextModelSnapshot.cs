// <auto-generated />
using System;
using EverythingSucks.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EverythingSucks.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EverythingSucks.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CartStatusId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.CartStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CartStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("51dd72dc-c176-43f7-ae1e-d5bafa64d5cf"),
                            Name = "Có hàng"
                        },
                        new
                        {
                            Id = new Guid("aae063d6-e16b-47df-a6e4-37dad96497d9"),
                            Name = "Trống"
                        });
                });

            modelBuilder.Entity("EverythingSucks.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("920517fd-5feb-4f88-9794-b0a445be3c75"),
                            Name = "Áo"
                        },
                        new
                        {
                            Id = new Guid("1b0afcc8-a676-4218-8769-e618d7bedae4"),
                            Name = "Quần"
                        },
                        new
                        {
                            Id = new Guid("722860e8-3b51-43a9-b8e6-23cb23e8b130"),
                            Name = "Phụ kiện"
                        });
                });

            modelBuilder.Entity("EverythingSucks.Models.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Color", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FavoriteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("26708295-53f5-4a53-ad70-cf52bb3d98f3"),
                            Name = "Đang chờ xác nhận"
                        },
                        new
                        {
                            Id = new Guid("6ffe7b52-3930-4322-9a24-dcc79b6040bd"),
                            Name = "Xác nhận"
                        },
                        new
                        {
                            Id = new Guid("57099238-e50f-4a8b-9d02-14bec441ab75"),
                            Name = "Chờ giao hàng"
                        },
                        new
                        {
                            Id = new Guid("7694cc13-b152-46ca-8adb-6e5d307b3fed"),
                            Name = "Đã giao"
                        },
                        new
                        {
                            Id = new Guid("40e2508d-10e0-4847-95cc-4b138796fe19"),
                            Name = "Đã hủy"
                        });
                });

            modelBuilder.Entity("EverythingSucks.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProdductColor", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductColorId");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5cd29be4-f527-40c2-99cb-7ef02f685fc3"),
                            CategoryId = new Guid("920517fd-5feb-4f88-9794-b0a445be3c75"),
                            Name = "Áo thun"
                        },
                        new
                        {
                            Id = new Guid("b9dfcd05-dddf-44ea-a615-61c0de52fa9b"),
                            CategoryId = new Guid("920517fd-5feb-4f88-9794-b0a445be3c75"),
                            Name = "Áo polo"
                        },
                        new
                        {
                            Id = new Guid("b3d67d39-d4c0-4cb1-bbcc-c442354c95ff"),
                            CategoryId = new Guid("920517fd-5feb-4f88-9794-b0a445be3c75"),
                            Name = "Áo sơ mi"
                        },
                        new
                        {
                            Id = new Guid("b8af638a-b78e-4536-b183-a292d77eebac"),
                            CategoryId = new Guid("1b0afcc8-a676-4218-8769-e618d7bedae4"),
                            Name = "Quần Short"
                        },
                        new
                        {
                            Id = new Guid("09b95943-b823-42e8-ab2e-d9fd8e10ecd0"),
                            CategoryId = new Guid("1b0afcc8-a676-4218-8769-e618d7bedae4"),
                            Name = "Quần Jeans"
                        },
                        new
                        {
                            Id = new Guid("d5d9cc47-3e23-4e11-8565-0922e68e8d38"),
                            CategoryId = new Guid("1b0afcc8-a676-4218-8769-e618d7bedae4"),
                            Name = "Quần Tây"
                        },
                        new
                        {
                            Id = new Guid("602f0676-ec2f-4057-9c91-71e08a6a99b8"),
                            CategoryId = new Guid("722860e8-3b51-43a9-b8e6-23cb23e8b130"),
                            Name = "Mũ & Mũ lưỡi trai"
                        },
                        new
                        {
                            Id = new Guid("35045601-1c46-400e-a9ed-a1671767cb75"),
                            CategoryId = new Guid("722860e8-3b51-43a9-b8e6-23cb23e8b130"),
                            Name = "Kính mát"
                        },
                        new
                        {
                            Id = new Guid("d47c9084-3415-4203-b4f9-961a7f4c9b7c"),
                            CategoryId = new Guid("722860e8-3b51-43a9-b8e6-23cb23e8b130"),
                            Name = "Túi"
                        });
                });

            modelBuilder.Entity("EverythingSucks.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("48ad7e95-c746-41ed-89b8-a03a7d178f0c"),
                            Name = "M"
                        },
                        new
                        {
                            Id = new Guid("aac26d2b-0cb3-4a8e-9234-6ea1792d9bf1"),
                            Name = "L"
                        },
                        new
                        {
                            Id = new Guid("0c4de5d6-52e6-44cb-8fd6-e3399eb277d3"),
                            Name = "XL"
                        },
                        new
                        {
                            Id = new Guid("ffaf2125-3e0b-4546-b4f0-57dcd4baf4d0"),
                            Name = "2XL"
                        },
                        new
                        {
                            Id = new Guid("a3d97789-c0a7-4bb5-a6e4-b10e8b1106f1"),
                            Name = "3XL"
                        });
                });

            modelBuilder.Entity("EverythingSucks.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique()
                        .HasFilter("[CartId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ec4998c4-6a50-431c-8fe8-84b7c64433b4",
                            ConcurrencyStamp = "e50acffb-ebd0-4714-b80c-a8f983b814f4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a0ffec45-9301-4ea6-b4d1-b00f8b2f1292",
                            ConcurrencyStamp = "767fd8da-5952-465e-b8b8-609a9967e622",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EverythingSucks.Models.Cart", b =>
                {
                    b.HasOne("EverythingSucks.Models.CartStatus", "CartStatus")
                        .WithMany("Carts")
                        .HasForeignKey("CartStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CartStatus");
                });

            modelBuilder.Entity("EverythingSucks.Models.CartItem", b =>
                {
                    b.HasOne("EverythingSucks.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EverythingSucks.Models.ProductColor", "ProductColor")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductColorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EverythingSucks.Models.Product", null)
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("EverythingSucks.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.Navigation("Cart");

                    b.Navigation("ProductColor");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("EverythingSucks.Models.Favorite", b =>
                {
                    b.HasOne("EverythingSucks.Models.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EverythingSucks.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EverythingSucks.Models.Order", b =>
                {
                    b.HasOne("EverythingSucks.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EverythingSucks.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("OrderStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EverythingSucks.Models.OrderItem", b =>
                {
                    b.HasOne("EverythingSucks.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EverythingSucks.Models.ProductColor", "ProductColor")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductColorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EverythingSucks.Models.Product", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("EverythingSucks.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.Navigation("Order");

                    b.Navigation("ProductColor");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("EverythingSucks.Models.Product", b =>
                {
                    b.HasOne("EverythingSucks.Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductColor", b =>
                {
                    b.HasOne("EverythingSucks.Models.Color", "Color")
                        .WithMany("ProductColors")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EverythingSucks.Models.Product", "Product")
                        .WithMany("ProductColors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductImage", b =>
                {
                    b.HasOne("EverythingSucks.Models.ProductColor", "ProductColor")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductColorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProductColor");
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductType", b =>
                {
                    b.HasOne("EverythingSucks.Models.Category", "Category")
                        .WithMany("ProductTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EverythingSucks.Models.User", b =>
                {
                    b.HasOne("EverythingSucks.Models.Cart", "Cart")
                        .WithOne("User")
                        .HasForeignKey("EverythingSucks.Models.User", "CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EverythingSucks.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EverythingSucks.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EverythingSucks.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EverythingSucks.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EverythingSucks.Models.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EverythingSucks.Models.CartStatus", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("EverythingSucks.Models.Category", b =>
                {
                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("EverythingSucks.Models.Color", b =>
                {
                    b.Navigation("ProductColors");
                });

            modelBuilder.Entity("EverythingSucks.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("EverythingSucks.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EverythingSucks.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductColors");
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductColor", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("EverythingSucks.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EverythingSucks.Models.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
